OOPS Concepts
______________

Function
_________

Functions are a block of code give a set of inputs and process the statements and deliver the output.
Function under a class is Method.

Methods
________

Methods are created by method definition and method calling.



Method definition
__________________
return_dataType method_identifier(arguments/Parameters){

method definition
}


Method calling
_______________

method_identifier(arguments/parameters);


Method Types
_____________

void parameterized method
void non parameterized method
non void parameterized method
non void non parameterized method


Recursion
_________

When the function call itself is called recursion.

In recursion there are two classes
1.Base class
2.Recursive class

Class and object
________________

Class is the blueprint of the object. Class is a template.

Object is a instance of a class.



Object has four major pilers they are

1.Encapsulation
2.Abstraction
3.Polymorphism
4.Inheritance

Class contains functions, methods, variable and etc.

class   class_name{}
keyword identifier


to access the members of the class in the main class or other class we must create a object


to create object
_________________

class_identifier object_name= new      class_identfier();
                              keyword  constructor




to access members of class
__________________________

object_name.memebers;


Access modifiers
________________

Types of access modifiers
____________________________

1.Public
2.Private
3.Protected

Constructors
_____________

Constructor is a method with same name as class. 
Constructor can only be created when a new object is created.
Constructor cannot be called unless creating a object.


Encapsulation
______________

Encapsulation means to wrap all data in a unit. That unit is class, and the process is encapsulation.

Abstraction
___________

Abstraction means hiding unnecessary data and Abstraction is a fundamental concept in programming that involves hiding complex implementation details and exposing only the necessary parts of 
a code or a system. It's a way to manage complexity by providing a simplified interface and allowing users or other parts of a system to 
interact with it without needing to understand the underlying complexities.

Inheritance
____________


1.Single Inheritance
2.Multilevel Inheritance
3.Multiple Inheritance
4.Hierachical Inheritance
5.Hybrid Inheritance


1.Single Inheritance means to inherit from only in parent class.
2.Multilevel inheritance means to inherit GrandParent class to parent class and child class inherit from parent class.
3.Multiple inheritance means to inherit two parent class to one child
4.Hierachical Inheritance means to inherit single parent class to two child class 
5.Hybrid Inheritance means combination of one or two more inheritance.


inheritance syntax
____________________

class parent_class_identifier{}

class childclass_name extends parent_class_identifiers{}


Method overloading
__________________

methods in parent class can be overloaded in child class with the same name and different attributes.


Polymorphism
____________

Polymorphism means poly means many morphism means form. Many forms of a same named method.

Same method with different signature value is polymorphism

eg

void              display(){
Signature_value   method_name
}

void              display       (int a){
Signature_value   method_name   signature_value(parameters)

}


Multiple inheritance is not possible in Java directly

so we use abstract class and interface to bring multiple inheritance

Abstract class
______________
Abstraction means hiding information from the user.
For example in a print statement if give hello world it prints hello world as result, but we don't know the actual procedure how the hello world is 
printed. Hiding the procedure is abstraction.

We cannot create object in abstract class.
Only method initialization can be done in abstract class.

If method is created in abstract class it must be overridden in the extended class(inherited class).


Interface
_________

Interface is also a kind of class.
in regular class we can have only one parent but we can have multiple parents. Also it help's in abstraction.

syntax
_______

interface identifier{}

All the methods in interface must be a abstract class, and it must not have any body.

to inherit interface to other class we must use implements

class  Interface  implements       Father, Mother{}
class class_name  keyword        interface_name(We can add more interface class_name) 

Multiple inheritance program
______________________________

interface Father{
 abstract void call();
 abstract void talk();
}

interface Mother{
 abstract void call();
 abstract void talk();
}

class Son implements Father, Mother{
	public void call(){
		System.out.println("Calling");
	}

	public void talk(){
		System.out.println("Talking");
	}

public static void main(String[] args){
	Son ob=new Son();
	ob.call();
	ob.talk();
	}
}

output
_________

Calling
Talking


Keywords
_________

1.Static Keyword
_________________
Static keyword make the variable or function to be used under any other static methods or functions.
(Compiler use static because it helps reduce memory by not having to create a object to access the class's members)

Static Keywords advantage is that is reduce memory consumption.


2.Final Keyword
______________

Final Keyword if give then it cannot be overridden.

3.Super Keyword
_________________

Super Keyword
______________

Super Keyword is used to access the inherited variable or method directly in the child class.


This Keyword
______________

This is used to assign data to the instance in the class and not under the argument given in the method.


this.identifier_name=identifier_instance name;

this.gender=gender;

program
_______
class man{
char gender;
int age;
void print(char gender, int age){
	this.gender=gender;
	this.age.age;
}
}
class This_keyword{
public static void main(String[] args){
	man m=new man('M',50);
	System.out.println(m.gender);
	System.out.println(m.age);
}
}


output
_______

M
50


Scanner Class
_____________

import java.util.Scanner;

Step 1
_______

to access Scanner we must first created a object for Scanner

Scanner identifier=new Scanner(System.in);

program
________

import java.util.Scanner;
public class input{
public static void main(String[] args){
Scanner input=new Scanner(System.in);//Creating Object for the scanner class
System.out.println("Enter a integer");
int a=input.nextint();
System.out.println("Input="+a);
}
}

Input
_____
1

output
______
Enter a integer
1
Input=1


in scanner methods are there for each datatype to be Scanner.

Int method
_________

int variable_identifier=scanner_identifier.nextInt();

Float Method
_____________

loat identifier=Scanner_object_name.nextFloat();



Charater method
_________________

We don't have a direct function to print only one character we have to use .charAt(index number);
charAt is used to select the particular indexed value in the word.

char identifier=Scanner_object_name.next().charAt(index value);


String
_______

Sting can be inputed with .next(); and nextLine();

String identifier=Scanner_object_name.next();//For single word
String identifier=Scanner_object_name.nextLine();//For more than one word

Eg-
String a=input.next();
String b=input.nextLine();




Exceptional Handling
_____________________

Default Exception
__________________

Exceptional handling means to handle the already know error by the user with a set of instructions. Which help to continue run the program and 
create a exception for the error to handle the error from interrupting the rest of the program.

To bring normal termination for the abnormal termination for certain situation like, if anything divide by 0 is 0 but in the compiler it will
show ArthematicException.

To handle any error in the middle of the program and to give normal termination of the program.

Syntax
_______

try{
	(the exceptional error which needs to be handled);
	}

catch(type_of_Exception object_name){//Exception is a predefined public class
(instead of error what must be printed);
}


finally{
}

prints even there is an error.


Throw keyword
______________

This keyword helps us to throw exception explicitly as the use wishes.	 

Syntax
_______

throw new Exception_name("The object needed to be thrown");

program
________

public class Exception{
public static void main(String[] args){
static void handle(int age){//static method is created with argument int age to determine whether the age is above 18
	if(age<18){//we use if condition 
	throw new ArithmeticException("Age is Invalid");//This keyword throws exception to the compiler ArithmeticException is a constructor and 
                                                           we are creating object for that
	}
try{
handle(17);//The exception is now caught in try block and given value
}
catch(ArithmeticException E){//Here the Exception is stored in the object E 
System.out.println(E);//To get only the message from the ArithmeticException we can call .getMessage() method from the ArithmeticException
}
finally{
System.out.println("catch is over");
}
}
}
}

output
______

java.lang.ArithmeticException: Invalid age  (if .getMessage() method is used then the output will only be Invalid age)
catch is over


______________
Exception -3
______________

User Defined EXception
______________________

All the Exception are a class so user can also create a Exception with user own definition.
To create a User Defined Exception

Throws keyword we use in the function definition itself it works as try block for the whole method.

Syntax
______
__________________
Step1-Declaration
__________________
class userdefined_exception_name extends Exception{}//It show inherit the already inbuilt Exceptions methods and functions
____________________________________________
Step2-Using Throws under methods definition
____________________________________________
To use Userdefined Exception we must use throws under a method defintion which is made as a Exception
Eg:-

static void Handle(int age)throws UserDefinedException,Other_Exception_if_needed{//we can add other Exceptions to the functions also
}
__________________________________
Step3-Try and catch the exception
_________________________________
try{}
catch{}

program
_______

how the ArithmeticException Throws the message example

class UserDefined extends Exception{
String msg;
UserDefined(String str){
this.msg=str;
}
getMsg(){
return this.msg;
}
}

this is the method when we use ArithmeticException(); constructor to Throw the message to the compiler we have replicated it in userdefined.

We donot require to override the already available functions under Exception class so we can simply use super.method_name keyword.

class UserDefined{
UserDefined(String msg){
super(msg);}
}
class Exception{
static void Handle(int age)throws UserDefined,ArithmeticException{
if(age<18){
 throw new UserDefined("Age is Invalid");
}
else{
throw new ArithmeticException("Age is Valid");
}
}

public static void main(String[] args){
try{
Handel(17);
}
catch(UserDefined E){
System.out.println(E.getMessage());
}
catch(ArithmeticException E){
System.out.println(E.getMessage());
}
}
}

output
______
Age is Invalid


Predefined Classes
__________________

Every inbuilt Class starts with a capital letter.
________
example
________
1.Integer
2.String
3.Character
4.Boolean
5.Float
6.Double
etc



1.Integer predefined methods
_____________________________
To convert integer value to String
___________________________________

public class predefinedclass{
public static void main(String[] args){
String s =Integer.toString(50);
System.out.println(s);

/*Converting Integer to binary String*/
______________________________________
String d =Integer.toBinaryString(15);
System.out.println(d);

/*Converting back the String value to integer*/

int f=Integer.valuOf(d);//valueOf is a method which has return value as Integer class so we are printing the variable as an object that is 					stored int the identifier
System.out.println(f);

/*Converting string bact to integer using parseInt*/

int g=Integer.parseInt(d);//parseInt is a method whic has return type as int 
System.out.println();
}
}

2.String predefined methods
____________________________

String_identifier.equals;
String_identifier.charAt();



program
________
public class predefinedclass{
public static void main(String[] args){
String f="sad life";
System.out.println(f.equlas("sad life"));

System.out.println(f.charAt(4));

/*converting char into charater array*/

char[] arr=f.toCharArray();
System.out.println(arr[2]);

}
}

output
______
true
l
a


3.Double predefined methods
____________________________

public class predefinedclass{
public static void main(String[] args){

String f="5.777";
System.out.println(Double.parseDouble(f));
}

}

output
______

5.777








Java Day12
Date:25/12/2024
Time:1.30 Pm

-> File Reading
-> File Writing


__________________________________________________________________________________________________________________________________________________

File Reading
_______________ 
To read a file there is a inbuilt package java.io.File;, Wherever we read a file we should import this package.

To read the contents of the file we must use Scanner class.


Syntax
______

Step 1
_______

import java.util.Scanner;//Scanner Class to read the file
import java.io.File;//File class is a inbuilt class used to create object for the file

Step 2
________

creating object for Scanner, File to access the file

File identifier=new File("path where the file exist");

Scanner identifier=new Scanner(f);

Step 3
_________

implementing Exception because now there is a eXception that the file is not found int the path error so we need to handle it

try{
File f=new file("Example.txt");
Scanner reader=new Scanner(f);
}
catch(FileNotFoundException E){
System.out.println(E);
}

Step 4
_______

To close the Scanner_object using .close(); function

import java.util.Scannr;
import java.io.File;
public class readingfile{
public static void main(String[] args){
try{
File f=new File("Example.txt");
Scanner reader=new Scanner(f);
while(reader.hasNextLine){
System.out.println(reader.nextLine);
reader.close();//It is a good practice to close the Scanner_object after the usage of the function is complete
}
}

program
________
import java.util.Scannr;
import java.io.File;
public class readingfile{
public static void main(String[] args){
try{
File f=new File("Example.txt");
Scanner reader=new Scanner(f);
while(reader.hasNextLine){
System.out.println(reader.nextLine);
reader.close();//It is a good practice to close the Scanner_object after the usage of the function is complete
}
}
catch(FileNotFoundException E){
System.out.println(E);
}
}
}

output
_______

Hello world
sadas


Writing in file
________________

To write something in a file we can use import java.io.FileWriter; package.

Step 1
______

import necessary package

import java.io.File;
import java.io.FileWriter;


Step 2
______

To create object for File and File Writer

File file_identifier=new File("Path of the file");
FileWriter filewriter_identifier=new FileWriter(file_identifier);


Step 3
_______

To create Exception Handling for FileNOtFoundException

try{
File f=new File("Example.txt");
FileWriter fw=new FileWriter(f);
}
catch(FileNotFoundException E){
System.out.println(E);
}

Step 4
_______

To close the Writer object, otherwise Exception will be thrown

try{
File f=new File("Example.txt");
FileWriter fw=new FileWriter(f);
fw.close();

}

Step 5
______

To write in the File

try{
File f=new File("Example.txt");
FileWriter fw=new FileWriter(f);
fw.write("Hello Do");
fw.close;
}


program
________
import java.io.File;
import java.io.FileWriter;
public class writinginfile{
public static void main(String[] args){
try{
File f=new File("Example.txt");
FileWriter fw=new FileWriter(f);
fw.write("Hello do");
fw.close();
}
catch(Exception E){
System.out.println(E);
}
}
}

output
______

In Exmaple.txt file

Hello do



















}








	


 

